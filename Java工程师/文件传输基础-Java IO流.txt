--File类常用API介绍
File类只用于表示文件（目录）的信息（名称，大小等），不能用于文件内容的访问

file.mkdir();	创建新的文件目录

file.exists();	判断file文件（文件夹）是否存在

file.createNewFile();	创建文件

file.isDirectory();	判断file是否是文件夹

file.isFile();	判断file是否是文件


--RandomAccessFile基本操作

RandomAccessFile Java提供的对文件内容的访问，既可以读文件，也可以写文件
RandomAccessFile支持随机访问文件，可以访问文件的任意位置

1.文件模型
在硬盘上的文件是byte byte，byte存储的是数据的集合

2.打开文件
有两种模式"rw"(读写)  "r"(只读)
RandomAccessFile faf = new RandomAccessFile(file,"rw");
文件指针，打开文件是指针在开头 pointer = 0；

3.写方法
raf.write(int)--->只写一个字节(后8位),同时指针指向下一个位置，准备再次写入

4.读方法
int b = raf.read()--->都一个字节

5.文件读写完成以后一定要关闭（Oracle官方说明）


--字节流之文件输入流FileInputStream

1.字节流  两个抽象的父类（InputStream,OutputStream)
InputStream抽象了应用程序读取数据的方式
OutputStream抽象了应用程序写出数据的方式

2.EOF= End 读到-1就读到结尾

3.输入流基本方法
int b = in.read(); 读取一个直接无符号填充到int低8位，-1是EOF
in.read(byte[] buf);
in.read(byte[] buf,int start,int size)

4.输出流基本方法
out.write(int b)  写出一个byte到流，b的低8位
out.write(byte[] buf) 将buf字节数组都写入到流
out.write(byte[] buf,int start,int size) 字节数组buf从start位置开始写size长度的字节到流

5.FileInputStream --->具体实现了在文件上读取读取数据

6.FileOutputStream 实现了向文件中写出byte数据的方法

7.DataOutputStream/DataInputStream
对“流”功能的扩展，可以更加方便的读取int,long,字符等类型数据

8.BufferedInputStream&BufferedOutputStream
这两个流类为IO提供了带缓冲的操作，一般打开文件进行写入或者读取器操作时，都会加上缓冲，这种流模式提高了IO的性能，从应用程序
中把数据放入文件，相当于将一缸水倒入到另一个缸中：
FileOutputStream --->write()方法相当于一滴一滴的把水“转移”过去
DataOutputStream --->writeXxx()方法会方便一些，相当于一瓢一瓢把水“转移”过去
BufferedOutputStream ---> write()方法更方便，相当于一瓢一瓢先把水放入桶中，再从桶中倒入到另一个缸中


--字符流

1.编码问题

2.认识文本和文本文件
Java中的文本（char)是16位无符号整数，是字符的Unicode编码（双字节编码）
文件是byte byte byte...的数据序列
文本文件是文本（char）序列按照某种编码方案（utf-8，utf-16be,gbk）序列化位byte的存储结构

3.字符流（Reader Writer)
字符的处理，一次处理一个字符
字符的底层仍然是基本的字节序列