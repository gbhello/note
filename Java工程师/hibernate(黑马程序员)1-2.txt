--hibernate 第一天
1.web内容回顾
（1）javaee三层结构
（2）mvc思想

2.hibernate概述

3.hibernate入门案例

4.hibernate配置文件

5.hibernate的api使用


--JavaEE三层结构
1.web层：struts2框架
2.service层：spring框架
3.dao层：hibernate框架
（1）对数据库进行crud操作


--MVC思想
1.m:模型
2.v:视图
3.c:控制器


--hibernate概述
1.hibernate框架应用在javaee三层结构中 dao层框架
2.在dao层里面做对数据库crud操作，使用hibernate实现crud操作，hibernate底层代码就是jdbc，hibernate对jdbc进行封装，使用hibernate好处，不需要写复杂的jdbc代码，不需要写sql语句实现
3.hibernate开源的轻量级的框架
4.hibernate版本 hibernate 5.x


--orm思想
1.hibernate使用orm事项对数据库进行crud操作
2.在web阶段学习javabean，更正确的叫法是 实体类
3.orm object relation mapping，对象关系映射

文字描述：
（1）让实体类和数据库表进行一一对应关系
让实体类首先和数据库表对应
让实体类属性 和 表里面字段对应
（2）不需要直接操作数据库，而操作表对应实体类对象

jdbc代码：
//加载驱动
Class.forName("com.mysql.jdbc.Driver");
//创建连接
Connection conn = DriverManager.getConnection(url,username,password);
//对sql进行预编译操作
String sql = "select * from user";
PreparedStatement psmt = conn.preparedStatement(sql);
//执行sql查询sql
ResultSet rs = psmt.executeQuery();
//遍历结果集
........
//释放资源
........


--配置实体类和数据库表一一对应关系
使用配置文件实现映射关系
（1）创建xml格式的配置文件
-映射配置文件名称和位置没有固定要求
-建议：在实体类的所在包里面创建，实体类名称hbm.xml

（2）配饰是xml格式，在配置文件中首先引入xml约束
-学过约束dtd约束，schema，在hibernate里面引入的约束为dtd约束
dtd文件所在位置：\hibernate-release-5.0.7.Final\project\hibernate-core\src\main\resources\org\hibernate

（3）配置映射关系
<hibernate-mapping>
	<!-- 1配置类和表对应 
		 class标签：实体类全路径
		 table属性:数据库表名称
	-->
	<class name="cn.itcast.entity.User" table="t_user">
		<!-- 2配置实体类id和表id对应
			 hibernate要求实体类有一个属性唯一值
			 hibernate要求表有字段作为唯一值
		 -->
		 <!-- id标签
		 	  name属性：实体类里面id属性名称
		 	  column属性：生成的表字段名称
		  -->
		  <id name="uid" column="uid">
		  	<!-- 设置数据库表id增长策略
		  		 native：生成表id值就是主键自动增长
		  	 -->
		  	 <generator class="native"></generator>
		  </id>
		  <!-- 配置其他的属性和表字段对应
		  	   name属性：实体类属性名称
		  	   column属性：生成表字段名称
		   -->
		   <property name="username" column="username"></property>
		   <property name="password" column="password"></property>
		   <property name="address" column="address"></property>
		  
	</class>
</hibernate-mapping>

（4）创建hibernate的核心配置文件（配置与那个数据库有关系）
1）核心配置文件格式xml，但是核心配置文件名称和位置是固定的
位置：必须在src下面
名称：必须是hibernate.cfg.xml
可参考：hibernate-release-5.0.7.Final\project\etc
2）引入dtd约束（示例文件路径同上）
<!DOCTYPE hibernate-configuration PUBLIC
	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
3）hibernate操作过程中只会加载核心配置文件，其他配置文件不会加载


--代码步骤介绍
第一步：加载hibernate核心配置文件

第二步：创建SessionFactory对象

第三步：使用SessionFactory创建session对象

第四步：开启事务

第五步：写具体逻辑 crud操作

第六步：提交事务

第七步：关闭资源


--hibernate核心配置文件
1.Configuration
Configuration cfg = new Configuration();
cfg.configure();
（1）到src下面找到名称是hibernate.cfg.xml配置文件，创建对象，把配置文件放到对象里面（加载核心配置文件）

2.SessionFactory（重点）
1）使用configuration对象创建sessionFactory对象
	-根据核心配置文件中的数据库配置，到数据库里面根据映射关系把表创建
2）创建sessionFactory过程中，建议一个项目创建一个sessionFactory对象
3）具体实现
	-写工具类，写静态代码块实现
	-静态代码块在加载时执行，执行一次

3.Session（重点）
1）session类似于jdbc中的connection
2）调用session里面不同方法实现crud操作
	-添加 save方法
	-修改 update方法
	-删除 delete方法
	根据id查询 get方法
3）session对象是单线程对象
	-session对象不能共用，只能自己使用

4.Transation
1）事务对象
Transaction tx = session.beginTransaction();
2）事务提交和回滚方法
tx.commit();
tx.rollback();
3）事务概念
原子性，一致性，隔离性，持久性


--解决配置文件没有提示的问题
1.赋值配置文件网址：http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd
2.eclipse中-window-preference-xml catalog
location栏中输入dtd文件所在路径，key type修改成URI，key框输入刚才复制的网址


--hibernate_day02

--实体类的编写规则
1.实体类里面属性是私有的

2.私有属性使用公开的set和get方法操作

3.要求实体类有属性作为唯一值（一般使用id值）

4.实体类 属性建议不使用基本数据类型，使用基本数据类型对应的包装类
1）八个基本数据类型对应的包装类
-int Integer
-char Character
-其他的都是首字母大写
2）比如 表示学生的分数，假如 int score;
-比如学生得了0分，基本数据类型表示为 int score = 0;
-如果表示学生没有参加考试，int score = 0;不能准确表示学生是否参加考试
解决：使用包装类就可以了，Integer score = 0;表示学生得了0分
表示学生没有参加考试：Integer score = null;


--添加操作（添加和根据id查询）
1.调用session里面的save方法实现
session.save(user);


--根据id查询
1.调用session里面的get方法实现


--更新操作
1.调用session里面的update方法


--删除操作
1.调用session里面的delete方法


--实体类的三种状态
1.瞬时态：对象里面没有id值，对象与session没有关联
User u = new User();
u.setUsername("jack");
u.setPassword("124");
u.setAddress("china");

2.持久态:对象里面有id值，对象与session关联
User user = session.get(User.class,1);

3.托管态:对象有id值，对象与session没有关联
User user = new User();
user.setUid(3);

--什么是缓存
1.数据存到数据库里面，数据库本身是文件系统，使用流方式操作文件效率不是很高
（1）把数据存到内存里面，数据库本身是文件系统，使用流方式操作文件效率不是很高
（2）把数据放到内存中，提供读取效率


--hibernate缓存
1.hibernate框架中提供很多优化方式，hibernate的缓存就是一个优化方式

2.hibernate缓存特点
第一类 hibernate的一级缓存
（1）hibernate的一级缓存默认是打开的
（2）hibernate的一级缓存使用范围，是session范围，从session创建到session关闭范围
（3）hibernate的一级缓存中，存储数据必须是持久态数据

第二类 hibernate的二级缓存
（1）目前已经不使用了，替代技术 redis
（2）二级缓存默认是不打开的，需要配置
（3）二级缓存使用范围，是sessionFactory范围


--验证一级缓存的存在
第一步执行get方法之后，发送sql语句查询数据库
第二步执行get方法之后，没有发送sql语句，而是查询一级缓存内容


--一级缓存的产生和使用过程
1.调用了get方法之后，首先，查询一级缓存，查询一级缓存发现没有数据，才会去查询数据库，返回user1对象（持久态对象），其次，把user1持久态对象放到一级缓存中，当再次调用get方法时，查询一级缓存内容，发现一级缓存有相同的数据，直接返回，不再需要查询数据库


--hibernate一级缓存特性执行过程
1.做查询操作时，user对象要放到两个地方，一个是一级缓存中，另一个是快照区，当做出修改操作时，会修改一级缓存中的内容，但是不会修改快照区的内容，提交事务的时候，会比较一级缓存中的内容和快照区中的内容是否一致，如果不一致，会把一级缓存中的内容更新到数据库中，做一个update操作，但是如果两者相同，就不会更新数据库


--Hibernate绑定session
1.session类似与jdbc的connection，之前web阶段学过threadLocal

2.帮实现与本地线程绑定session

3.获取与本地线程session
（1）在hibernate核心配置文件中配置
<property name="hibernate.current_session_context_class">thread</property>
（2）调用sessionFactory里面的方法得到
public static Session getSessionobject() {
		return sessionFactory.getCurrentSession();
	}
4.获取与本地线程绑定session时候，关闭session会报错，不需要手动关闭了


--Query对象
1.使用query对象，不需要写sql语句，但是写hql语句
（1）hql：提供查询语言，这个hql语句和普通sql语句很相似
（2)hql和sql语句区别
-使用sql操作表和表字段
-使用hql操作实体类和属性

2.查询所有hql语句
（1）from实体类名称

3.Query对象使用
（1）创建Query对象
（2）调用query对象从里面的方法得到结果


--Criteria对象
1.使用这个对象查询操作，但是使用这个对象的时候，不需要写语句，直接调用方法实现

2.实现过程
（1）创建criteria对象
（2）调用对象里面的方法得到结果


--SQLQuery对象
1.使用hibernate时候，调用底层sql实现

2.实现过程
（1）创建对象
（2）调用对象的方法得到结果，返回list集合每部分是数组形式
（3）也可以使其返回结果是对象的形式，可以调用SQLQuery对象的addEntity方法。返回的结果就是对象，可以像上面两个一样直接输出
