--JSP注释

HTML的注释：
<!--html-->	//客户端可见

JSP的注释：
<%--html注释--%> //客户端不可见

JSP脚本注释：
// 单行注释
/**/ 多行注释


--JSP脚本
在JSP页面中执行的Java代码

<% Java代码%>


--JSP声明
在JSP页面中定义变量或者方法
<%! java代码%>


--JSP表达式
在JSP页面中执行的表达式
<%=表达式%>	//注意：表达式不以分号结束


--JSP页面生命周期

用户发出请求index.jsp --> 是第一次请求 --> JSP引擎把该JSP文件转换成为Servlet,生成字节码文件，并执行jspInit() --> 解析执行jspService(),处理用户的请求
					 --> 不是第一次请求 --> 直接访问生成的字节码文件 --> 解析执行jspService(),处理用户的请求

jspService()方法被调用来处理客户端的请求。对每一个请求，JSP引擎创建一个新的线程来处理该请求。如果有多个客户端同时请求该JSP文件，则JSP引擎会创建多个线程。每个客户端请求对应一个线程。以多线程方式执行可以大大降低对系统的资源需求，提高系统的并发量及响应时间。但也要注意多线程的编程带来的同步问题，由于该Servlet始终驻于内存，所以响应时非常快的


--JSP内置对象

内置对象简介：JSP内置对象时Web容器创建的一组对象，不适用new关键字就可以使用的内置对象

JSP九大内置对象：
常用对象：out,request,response,session,application
不太常用对象：Page,PageContext,exception,config

--Web程序的请求响应模式
用户发送请求（request）
服务器给用户响应（response）


--out对象：
out对象是JspWriter类的实例，是向客户端输出内容常用的对象。
常用方法如下：

1.void println() 向客户端打印字符串

2.void clear() 清除缓冲区的内容，如果在flush之后调用会抛出异常

3.void clearBuffer() 清除缓冲区的内容，如果在flush之后调用不会抛出异常

4.void flush() 将缓冲区内容输出到客户端

5.int getBufferSize() 返回缓冲区以字节数的大小，如不设缓冲区则为0

6.int getRemaining() 返回缓冲区还剩余多少可用

7.boolean isAutoFlush() 返回缓冲区满是，是自动清空还是抛出异常

8.void close() 关闭输出流


--表单的两种提交方式：get与post

1.get：以名文的方式通过URL提交数据，数据在URL中可以看到。提交的数据最多不超过2KB。安全性较低但效率比post方式高。
适合提交数据量不大，安全性不高的数据。比如：搜索，查询等功能。

2.post：将用户提交的信息封装在HTML HEADER内。适合提交数据量大，安全性高的用户信息。比如：注册，修改，上传等功能。


--request对象

客户端的请求被封装在request对象中，通过它才能了解到客户的需求，然后做出响应。它是HttpServletRequest类的实例。request对象具有请求域，即完成客户端的请求之前，该对象一直有效，常用的方法如下：

1.String getParameter(String name) 返回那么指定参数的参数值

2.String[] getParameterValues(String name) 返回包含参数name的所有值的数组

3.void setAttribute(String,Object) 存储此请求中的属性

4.object getAttribute(String name) 返回指定属性的属性值

5.String getContentType() 得到请求体的MIME类型

6.String getProtocol() 返回请求用的协议类型及版本号

7.String getServerName() 返回接受请求的服务器主机名


--response对象

response对象包含了响应客户请求的有关信息，但在JSP中很少直接用到它。它是HttpServletResponse类的实例。response对象具有页面作用域，即访问一个页面时，该页面内的response对象只能对这次访问有效，其它页面的response对象对当前页面无效。常用方法如下：

1.String getCharacterEncoding() 返回响应用的是何种字符编码

2.void setContentType(String type) 设置响应的MIME类型

3.PrintWriter getWriter() 返回可以向客户端输出字符的一个对象(注意PrintWriter与内置out对象的区别)

4.sendRedirect(java.lang.String location) 重新定向客户端的请求


--请求转发与请求重定向

请求重定向：客户端行为，response.sendRedirect(),从本质上讲等同于两次请求，前一次的请求对象不会保存，地址栏的URL地址会改变

请求转发：服务器行为，request.getRequestDispatcher().forward(req,resp);是一次请求，转发后请求对象会保存，地址栏的URL地址不会改变


--session对象

1.session对象是一个JSP内置对象

2.session对象在第一个JSP页面被装载是自动创建，完成回会话期管理

3.从一个客户打开浏览器并连接到服务器开始，到客户关闭浏览器离开这个服务器结束，被称为一个会话。

4.当一个客户访问一个服务器是，可能会在服务器的几个页面之间切换，服务器应当通过某种办法知道这是一个客户，就需要session对象。

5.session对象是HttpSession类的实例。


--session对象常用方法如下：

1.long getCreationTime():返回session创建时间

2.public String getId():返回session创建时JSP引擎为它设的唯一ID号

3.public Object setAttribute(String name):使用指定名称将对象绑定到此会话

4.public Object getAttribute(String name):返回此hi话中的指定名称绑定在一起的对象，如果没有对象绑定在该名称下，则返回null

5.String[] getValueNames():返回一个包含此session中所有可用属性的数组

6.int getMaxInactiveInterval():返回两次请求间隔多长时间此session被取消（单位：秒）


--session的生命周期

1.只要当前会话页面没有全部关闭，重新打开新的浏览器窗口访问同一个项目资源时属于同一次会话

2.除非本次会话的所有页面都关闭后再重新访问某个Jsp或者Servlet将会创建新的会话

3.创建新的会话并不代表原来的会话已经结束，只是这个旧的session仍然存在于服务端，只不过再也没有客户端会携带它然后交予服务器端校验

session生命周期-销毁（仅有三种方式）：

1.调用了session.invalidate()方法

2.Session过期（超时）

3.服务器重新启动

设置session超时有两种方式：

1.session.setMaxInactiveInterval(时间);// 单位时秒

2.在web.xml中进行配置
<session-config>
<session-timeout>10</session-timeout>// 时间是分钟
</session-config>


--application对象

1.application对象实现了用户间数据的共享，可存放全局变量

2.application开始与服务器的启动，终止于服务器的关闭

3.在用户的前后连接或不同用户之间的链接中，可以对application对象的同一属性进行操作

4.在任何地方对application对象属性的操作，都将影响其他用户对此的访问

5.服务器的启动和关闭决定了application对象的生命

6.application对象是ServletContext类的实例

常用方法;

1.public void setAttribute(String name,Object value) 使用指定名称将对象绑定到此会话

2.public Object getAttribute(String name) 返回与此会话中的指定名称绑定在一起的对象，如果没有对象绑定在该名称下，则返回null。

3.Enumeration getAttributeNames() 返回所有可用属性名的枚举

4.String getServerInfo（） 返回JSP(SERVLET)引擎名及版本号


--pageContext对象

1.pageContext对象提供了对JSP页面内所有的对象及名字空间的访问

2.pageContext对象可以访问到本页所在的session，也可以取本页面所在的application的某一属性

3.pageContext对象相当于页面中所有功能的集大成者

4.pageContext对象的本类名也叫pageContext

常用方法：

1.JspWriter getOut() 返回当前客户端响应被使用的JspWriter流(out)

2.HttpSession getSession() 返回当前页中的Httpsession对象(session)

3.Object getPage() 返回当前页中的Object对象(page)

4.ServletRequest getRequest() 返回当前页的ServletRequest对象(request)

5.ServletResponse getResponse() 返回当前页的ServletResponse对象(response)

6.void setAttribute(String name,Object attribute) 设置属性及属性值

7.Object getAttribute(String name,int scope) 在指定范围内去属性的值

8.int getAttributeScope(String name) 返回某属性的作用范围

9.void forward(String relativeUrlPath) 使当前页面重导到另一页面

10.void include(String relativeUrlPath) 在当前位置包含另一文件


--Config对象
	config对象是在一个Servlet初始化时，JSP引擎向它传递信息用的，此信息包括Servlet初始化时所用到的参数（通过属性名和属性值构成）以及服务器的有关信息（通过传递一个ServletContext对象），常用方法如下：

1.ServletContext getServletContext() 返回含有服务器相关信息的ServletContext对象

2.String getInitParameter（String name) 返回初始化参数的值

3.Enumeration getInitParameterName() 返回Servlet初始化所需所有参数的枚举


--Exception对象

exception对象是一个异常对象，当一个页面在运行过程中发生了异常，就产生这个对象。如果一个JSP页面要应用次对象，就必须把isErrorPage设置为true,否则无法编译。他实际上是
java.lang.Throwable的对象，常用方法如下:

1.String getMessage() 返回描述异常的消息

2.String toString() 返回关于异常的简短描述消息

3.void printStackTrace() 显示异常及其栈轨迹

4.Throwable FillInStackTrace() 重写异常的执行栈轨迹