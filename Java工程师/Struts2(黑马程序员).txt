--struts2概述：

1.struts2框架应用javaee三层结构中的web层框架

2.struts2框架在struts1和webwork基础上发展的全新的框架

3.struts2解决的问题：

传统：用户管理功能(crud操作)需要添加的时候就要 “添加servlet”
修改的时候就要修改servlet

如果功能很多，创建很多的servlet，造成维护特别不方便

web阶段解决方案：创建BaseServlet解决 写到底层反射代码实现


--action对比servlet

1.每次访问servlet时，都会执行service方法
-继承HttpServlet,重写类里面的方法
-在web.xml中配置servlet访问路径

2.每次访问action时，默认执行execute方法
-配置action访问路径


--配置action类访问路径

1.创建struts2核心配置文件
核心配置文件名称和位置是固定的
位置必须在src下面，名称struts.xml

2.引入dtd约束

3.action配置


--struts2框架的执行过程(项目:struts2_day01)

1.地址栏输入项目url

2.过滤器 在过滤器中实现功能

3.*获取请求路径
*得到路径里面的hello值

4.*到src下面找struts.xml,使用dom4j解析，得到xml文件中内容
*拿着hello值到xml文件找action标签，匹配name属性值是否一样

5.*匹配name属性值一样，都是hello
*找到name属性所在的action标签里面另外一个属性class值
*得到值是action全路径
*使用反射实现功能

6.反射代码
Class clazz = Class.forName("action全路径")；
//得到名称是execute的方法
Method m = clazz.getMethod("execute");
//方法执行
Object obj = m.invoke();

7.*得到action方法的返回值
*在struts2.xml文件中，找到action标签里面的result标签，匹配result标签的name属性值是否一样
*如果一样，跳转到配置页面中


--查看源代码

1.过滤器在服务器启动时创建，创建过滤器时执行init方法
*在init方法中主要加载配置文件
包含自己创建的配置文件和struts2自带配置文件 struts.xml web.xml


--struts2配置

1.struts2的核心配置文件
（1）名称和位置时固定的
（2）在配置文件中主要有三个标签 package，action，result

2.标签package
（1）类似于代码包，区别不同的action，要配置action，必须首先写package标签，在package里面才能配置action
（2）package标签属性
-name属性
name属性值与功能本身是没有关系的
在一个配置文件中可以写多个package标签，name属性值不能相同
（3）extends属性
-属性值是固定的，struts-default
-写了这个属性之后，在package里面配置的类具有action
（4)namespace属性
-namespace属性值和action标签里面的name属性值构成访问路径

3.标签action
（1）name属性
-namespace属性值和action标签里面的name属性值构成访问路径
-在package标签里面写多个action标签，但是action的name属性值不能相同
（2）class属性
-action全路径
（3）method属性
-比如在action里面默认执行的方法execute方法，但是在action里面写其他的方法
-让action里面多个方法执行，使用method进行配置

4.标签result
（1）根据action的方法返回值，配置到不同的路径里面
（2）name属性
-和方法返回值一样
（3）type属性
-配置如何到路径中（转发或者重定向）
-type属性默认值 做转发操作


--struts2常量配置
1.修改struts2默认常量值
（1）常用的方式
-在struts.xml中进行配置
（2）还有两种方式（了解）
-在src下面创建struts.properties,进行修改
-在web.xml进行修改

2.介绍最常用常量
struts.i18n.encoding=UTF-8
（1）表单提交数据到action里面，在action可以获取表单提交数据
（2）web阶段表单提交数据有中文，有乱码问题，解决
-post 提交直接设置编码
-get 提交做编码转换
（3)如果在action获取表单通过post方式提交中文，中文乱码问题框架已经解决，不需要自己处理问题


--分模块开发

1.单独写配置文件，把配置文件引入到核心配置文件中


--Action的编写方式

1.action编写有三种方式
1.创建普通类，这个不继承任何类，不实现任何接口

2.创建类，实现接口Action

3.创建类，继承类ActionSupport(一般使用这种方法)


--访问action的方法

1.有三种方式实现
（1）使用action标签的method属性，在这个属性里面写执行的action方法
（2）使用通配符方式实现（重点掌握）
-在action标签里面的name属性，那么属性值里面写符号* 星号
-*理解：表示匹配任意内容
比如访问hello，*可以匹配到
比如访问add，*可以匹配到
（3）动态访问实现

2.演示错误
（1）如果action方法有返回值，在配置文件中没有配置，出现错误
（2）在action里面的方法有返回值，如果有返回值类型必须是String
（3）action里面的方法可以没有返回值，没有返回值的时候，在result标签不需要配置
-把方法写成void
-让返回值返回"none"


--全局页面配置
1.result标签配置action方法的返回值到不同的路径里面

2.创建两个action，执行默认的方法execute方法，让两个action的方法返回success，返回success之后，配置到同一个页面里面
（1）如果有多个action，方法里面返回值是相同的，到页面也是相同的，这个时候可以使用全局页面配置


--局部结果页面
（1）配置了全局页面，也配置了局部页面，最终以局部配置为准


--result标签的type属性
1.result标签里面除了name属性之外，还有一个属性：type
（1）type属性：如何到路径里面（转发还是重定向）

2.type属性值
（1）默认值，做转发操作，值是diapatcher

（2）做重定向操作，值是redirect


--action获取表单提交数据主要三种方式
（1）使用ActionContext类
（2）使用ServletActionContext类
（3）使用接口注入的方式


--使用ActionContext类获取

Map<String,Object> getParameters() 返回一个包含所有HttpServletRequest参数信息
（1）因为这个方法不是静态的方法，需要创建ActionContext类的对象
（2）这个ActionContext类对象不是new出来的

static ActionContext getContext() 获取当前线程的ActionContext对象

1.具体演示
（1）创建表单，提交表单到action里面
（2）在action使用ActionContext获取数据


--使用ServletActionContext类获取
1.调用类里面的静态方法，得到request对象


--使用接口注入（了解）
1.让action实现ServletRequestAware接口，为了得到request对象


--在action中操作域对象
1.request，session，servletContext域对象

2.使用ServletActionContext类操作


--原始方式获取表单封装到实体类对象
public String execute() throws Exception {
		//1.获取表单数据
		HttpServletRequest request = ServletActionContext.getRequest();
		String username = request.getParameter("username");
		String password = request.getParameter("password");
		String address = request.getParameter("address");
		
		//2.封装到实体类对象里面
		User user = new User();
		user.setUsername(username);
		user.setPassword(password);
		user.setAddress(address);
		
		System.out.println(user);
		return NONE;
	}


--属性封装
1.直接把表单提交属性封装到action的属性里面

2.实现步骤
（1）在action成员变量位置定义变量
变量名称和表单输入项的name属性值一样
（2）生成变量的set方法（把set和get方法都写出来）

3.使用属性封装获取表单数据到属性里面， 不能把数据直接封装到实体类对象里面
如果想把表单信息放到对象里面去，还需要new一个实体类对象，然后利用对象的set和get方法去实现


--模型驱动封装（重点）
1.使用模型驱动方式，可以直接把表单数据封装到实体类对象里面

2.实现步骤
（1）action实现接口 ModelDriven
（2）实现接口里面的方法 getModel方法 把创建对象返回
（3)在action里创建实体类对象

3.使用模型驱动封装和属性封装注意问题
（1）在一个action中，获取表单数据可以属性封装，也可以使用模型驱动封装，但是不能同时使用属性封装和模型驱动封装，如果同时使用，只会执行模型驱动封装


--表达式封装（会用）
1.实现过程
（1）使用表达式封装可以把表单提交数据封装到实体类对象里面
第一步：在action里面声明实体类
第二步：生成实体类变量的set和get方法
第三步：在表单输入项的name属性值里面写表达式

2.可以把表达式封装归类到属性封装里面


--比较表达式封装和模型驱动封装
1.使用表达式封装和模型驱动封装都可以把数据封装到实体类对象里面

2.不同点：
（1）使用模型封装只能把数据封装到一个实体类对象里面
在一个action里面不能使用模型驱动把数据封装到不同的实体类对象里面
（2）使用表达式封装可以把数据封装到不同的实体类对象里面


--封装数据到List集合
第一步：在action中声明List

第二步：生成list变量的set和get方法

第三步：在表单输入项里面写表达式


--封装数据到Map集合
第一步：声明map集合
第二步：生成get和set方法
第三步：在表单输入项的name属性值里面写表达式


--OGNL概述
1.之前web阶段，学习过EL表达式，EL表达式在jsp中获取域对象里面的值

2.OGNL是一种表达式，这个表达式功能更加强大
（1）在struts2里面操作值栈数据
（2）一般把OGNL在struts2里面操作，和struts2一起使用操作值栈

3.OGNL不是struts2的一部分，它是单独的项目，只不过是经常和struts2一起使用
（1）使用ognl时候首先导入jar包，struts2提供jar包

